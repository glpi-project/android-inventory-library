apply plugin: 'com.android.library'

android {
    compileSdkVersion 29
    buildToolsVersion '29.0.2'

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            testCoverageEnabled true
        }
    }
}

configurations {
    javadocDeps
}


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    androidTestImplementation('androidx.test.espresso:espresso-core:3.3.0', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testImplementation 'junit:junit:4.12'
    testImplementation 'androidx.test:runner:1.3.0'
    testImplementation 'androidx.test:core:1.3.0'

    implementation 'com.orhanobut:logger:2.2.0'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.core:core:1.3.1'

    javadocDeps 'com.orhanobut:logger:2.2.0'
    javadocDeps 'androidx.appcompat:appcompat:1.2.0'
    javadocDeps 'androidx.core:core:1.3.1'
}


Properties properties = new Properties()
if(project.rootProject.file('local.properties').exists()) {
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
}

ext {
    bintrayRepo = 'teclib-repository'
    bintrayName = 'android-inventory-library'
    bintrayUserOrg = "flyve-mdm"

    publishedGroupId = 'org.flyve'
    libraryName = 'inventory'
    artifact = 'inventory'

    task sourcesJar(type: Jar) {
        from android.sourceSets.main.java.srcDirs
        classifier = 'sources'
    }

    task javadoc(type: Javadoc) {
        doFirst {
            configurations.implementation
                    .filter { it.name.endsWith('.aar') }
                    .each { aar ->
                        copy {
                            from zipTree(aar)
                            include "**/classes.jar"
                            into "$buildDir/tmp/aarsToJars/${aar.name.replace('.aar', '')}/"
                        }
                    }
        }

        configurations.implementation.setCanBeResolved(true)
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        classpath += configurations.implementation
        classpath += fileTree(dir: "$buildDir/tmp/aarsToJars/")

        if (!project.hasProperty("customDestination")) {
            customDestination = "development"
        }

        println "Destination for javadoc is "+customDestination
        destinationDir = file("../"+customDestination)
        failOnError true
    }



    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives javadocJar
        archives sourcesJar
    }


    libraryDescription = 'Inventory client library written in Java for developing applications on Android'

    siteUrl = 'https://github.com/flyve-mdm/android-inventory-library'
    gitUrl = 'https://github.com/flyve-mdm/android-inventory-library.git'

    libraryVersion = properties.getProperty("version")

    developerId = 'ivans51'
    developerName = 'Ivan Del Pino'
    developerEmail = 'idelpino@teclib.com'

    licenseName = 'GNU GENERAL PUBLIC LICENSE, Version 3.0'
    licenseUrl = 'https://www.gnu.org/licenses/gpl-3.0.html'
    allLicenses = ["GPL-3.0"]
}

apply from: 'bintray.gradle'
apply from: 'install.gradle'
